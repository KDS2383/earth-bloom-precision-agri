import jsPDF from 'jspdf';

interface SoilData {
  location: string;
  soilType: string;
  ph: number;
  texture: {
    sand: number;
    silt: number;
    clay: number;
  };
  organicMatter: number;
  nutrients: {
    nitrogen: number;
    phosphorus: number;
    potassium: number;
    calcium: number;
    magnesium: number;
    sulfur: number;
  };
  cec: number;
}

export const generateSoilReport = (data: SoilData): jsPDF => {
  const doc = new jsPDF();
  const lineHeight = 7;
  let yPos = 20;

  // Title
  doc.setFontSize(16);
  doc.text('SOIL ANALYSIS REPORT', 105, yPos, { align: 'center' });
  yPos += lineHeight * 2;

  // Reset font size for content
  doc.setFontSize(10);

  // Header info
  doc.text(`Location: ${data.location}`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, yPos);
  yPos += lineHeight * 1.5;

  // General Characteristics
  doc.setFontSize(12);
  doc.text('GENERAL CHARACTERISTICS', 20, yPos);
  yPos += lineHeight;
  doc.setFontSize(10);
  doc.text(`Soil Type: ${data.soilType}`, 20, yPos);
  yPos += lineHeight;
  doc.text(`pH Level: ${data.ph} (${data.ph < 6.5 ? "Acidic" : data.ph > 7.5 ? "Alkaline" : "Neutral"})`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Organic Matter: ${data.organicMatter}%`, 20, yPos);
  yPos += lineHeight;
  doc.text(`CEC: ${data.cec} meq/100g`, 20, yPos);
  yPos += lineHeight * 1.5;

  // Soil Texture
  doc.setFontSize(12);
  doc.text('SOIL TEXTURE', 20, yPos);
  yPos += lineHeight;
  doc.setFontSize(10);
  doc.text(`Sand: ${data.texture.sand}%`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Silt: ${data.texture.silt}%`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Clay: ${data.texture.clay}%`, 20, yPos);
  yPos += lineHeight * 1.5;

  // Nutrient Analysis
  doc.setFontSize(12);
  doc.text('NUTRIENT ANALYSIS', 20, yPos);
  yPos += lineHeight;
  doc.setFontSize(10);
  doc.text(`Nitrogen (N): ${data.nutrients.nitrogen} ppm`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Phosphorus (P): ${data.nutrients.phosphorus} ppm`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Potassium (K): ${data.nutrients.potassium} ppm`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Calcium (Ca): ${data.nutrients.calcium} ppm`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Magnesium (Mg): ${data.nutrients.magnesium} ppm`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Sulfur (S): ${data.nutrients.sulfur} ppm`, 20, yPos);
  yPos += lineHeight * 1.5;

  // Recommendations
  doc.setFontSize(12);
  doc.text('RECOMMENDATIONS', 20, yPos);
  yPos += lineHeight;
  doc.setFontSize(10);

  const recommendations = [
    data.ph < 6.5 ? "Consider liming to raise pH" : data.ph > 7.5 ? "Consider adding sulfur to lower pH" : "Maintain current pH management practices",
    data.organicMatter < 3 ? "Increase organic matter through cover cropping or compost application" : "Maintain current organic matter levels",
    "Focus on balanced nutrient management based on specific crop needs"
  ];

  recommendations.forEach((rec, index) => {
    doc.text(`${index + 1}. ${rec}`, 20, yPos);
    yPos += lineHeight;
  });

  yPos += lineHeight * 2;
  doc.setFontSize(8);
  doc.text('Generated by FarmAI Soil Analysis System', 105, yPos, { align: 'center' });

  return doc;
};

export const downloadReport = (data: SoilData) => {
  const doc = generateSoilReport(data);
  const fileName = `soil-report-${data.location.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};